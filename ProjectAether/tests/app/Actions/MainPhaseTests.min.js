var __extends=this.__extends||function(n,t){function i(){this.constructor=n}i.prototype=t.prototype,n.prototype=new i},ProjectAether;(function(n){(function(t){var i=function(i){function r(){i.apply(this,arguments)}return __extends(r,i),r.prototype._canPlayCard_PlayerNotHoldingCard_ReturnsFalse=function(i){var r=t.GameFactory.create(),u=new n.Actions.MainPhase(r),f;u._getCardAction=function(){return new t.MockAction},f=new n.CardBase("test",5,r.currentPlayer()),r.currentPlayer().isHoldingCard=function(){return!1},i.isFalsey(u._canPlayCard(f))},r.prototype._canPlayCard_PlayerCantAffordCard_ReturnsFalse=function(i){var r=t.PlayerFactory.create(),e=t.GameFactory.create(r),u,f;r.mana(2),u=new n.Actions.MainPhase(e),u._getCardAction=function(){return new t.MockAction},f=t.CardFactory.create(r,5),i.isFalsey(u._canPlayCard(f))},r.prototype._canPlayCard_DoesNotHaveValidTargets_ReturnsFalse=function(i){var r=t.PlayerFactory.create(),u=t.GameFactory.create(r),f=new n.Actions.MainPhase(u),e;f._getCardAction=function(){return new t.MockAction},u.hasValidNonButtonTargets=function(){return!1},e=t.CardFactory.create(r,5),i.isFalsey(f._canPlayCard(e))},r.prototype._canPlayCard_IsHoldingCardAndCanAffordAndHasValidTargets_ReturnsTrue=function(i){var r=t.PlayerFactory.create(),u=t.GameFactory.create(r),f=new n.Actions.MainPhase(u),e;f._getCardAction=function(){return new t.MockAction},r.mana(10),u.currentPlayer().isHoldingCard=function(){return!0},u.hasValidNonButtonTargets=function(){return!0},e=t.CardFactory.create(r,5),i.isTrue(f._canPlayCard(e))},r.prototype.getTargetAction_CardThatCanBePlayed_ReturnsPlace=function(){var i=t.PlayerFactory.create(),f=t.GameFactory.create(i),r=new n.Actions.MainPhase(f),u;r._canPlayCard=function(){return!0},u=t.CardFactory.create(i),this.assert.areIdentical(r.getTargetAction(u),n.TargetActions.Place)},r}(t.TestClassBase);t.MainPhaseTests=i})(n.Tests||(n.Tests={}));var t=n.Tests})(ProjectAether||(ProjectAether={}))